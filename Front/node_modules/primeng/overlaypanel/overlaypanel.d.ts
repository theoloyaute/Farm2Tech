import { AnimationEvent } from '@angular/animations';
import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, QueryList, Renderer2, TemplateRef } from '@angular/core';
import { OverlayService, PrimeNGConfig } from 'primeng/api';
import { ConnectedOverlayScrollHandler } from 'primeng/dom';
import { Subscription } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "primeng/ripple";
import * as i3 from "primeng/api";
import * as i4 from "primeng/icons/times";
export declare class OverlayPanel implements AfterContentInit, OnDestroy {
    private document;
    private platformId;
    el: ElementRef;
    renderer: Renderer2;
    cd: ChangeDetectorRef;
    private zone;
    config: PrimeNGConfig;
    overlayService: OverlayService;
    dismissable: boolean;
    showCloseIcon: boolean;
    style: any;
    styleClass: string;
    appendTo: any;
    autoZIndex: boolean;
    ariaCloseLabel: string;
    baseZIndex: number;
    focusOnShow: boolean;
    showTransitionOptions: string;
    hideTransitionOptions: string;
    onShow: EventEmitter<any>;
    onHide: EventEmitter<any>;
    templates: QueryList<any>;
    container: HTMLDivElement;
    overlayVisible: boolean;
    render: boolean;
    isOverlayAnimationInProgress: boolean;
    selfClick: boolean;
    documentClickListener: () => void | null;
    target: any;
    willHide: boolean;
    scrollHandler: ConnectedOverlayScrollHandler | null;
    documentResizeListener: () => void | null;
    contentTemplate: TemplateRef<any>;
    closeIconTemplate: TemplateRef<any>;
    destroyCallback: Function;
    overlayEventListener: (event?: any) => void | null;
    overlaySubscription: Subscription;
    constructor(document: Document, platformId: any, el: ElementRef, renderer: Renderer2, cd: ChangeDetectorRef, zone: NgZone, config: PrimeNGConfig, overlayService: OverlayService);
    ngAfterContentInit(): void;
    bindDocumentClickListener(): void;
    unbindDocumentClickListener(): void;
    toggle(event: any, target?: any): void;
    show(event: any, target?: any): void;
    onOverlayClick(event: any): void;
    onContentClick(): void;
    hasTargetChanged(event: any, target: any): boolean;
    appendContainer(): void;
    restoreAppend(): void;
    align(): void;
    onAnimationStart(event: AnimationEvent): void;
    onAnimationEnd(event: AnimationEvent): void;
    focus(): void;
    hide(): void;
    onCloseClick(event: any): void;
    onWindowResize(event: any): void;
    bindDocumentResizeListener(): void;
    unbindDocumentResizeListener(): void;
    bindScrollListener(): void;
    unbindScrollListener(): void;
    onContainerDestroy(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<OverlayPanel, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<OverlayPanel, "p-overlayPanel", never, { "dismissable": "dismissable"; "showCloseIcon": "showCloseIcon"; "style": "style"; "styleClass": "styleClass"; "appendTo": "appendTo"; "autoZIndex": "autoZIndex"; "ariaCloseLabel": "ariaCloseLabel"; "baseZIndex": "baseZIndex"; "focusOnShow": "focusOnShow"; "showTransitionOptions": "showTransitionOptions"; "hideTransitionOptions": "hideTransitionOptions"; }, { "onShow": "onShow"; "onHide": "onHide"; }, ["templates"], ["*"], false, never>;
}
export declare class OverlayPanelModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<OverlayPanelModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<OverlayPanelModule, [typeof OverlayPanel], [typeof i1.CommonModule, typeof i2.RippleModule, typeof i3.SharedModule, typeof i4.TimesIcon], [typeof OverlayPanel, typeof i3.SharedModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<OverlayPanelModule>;
}
